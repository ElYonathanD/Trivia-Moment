[
  {
    "id": 1,
    "question": "¿Cuál es la salida de este código?",
    "code": "console.log(typeof NaN)",
    "answers": [
      "undefined",
      "NaN",
      "string",
      "number"
    ],
    "correctAnswer": 3
  },
  {
    "id": 2,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "3 + 2 + '7'",
    "answers": [
      "12",
      "327",
      "57",
      "NaN"
    ],
    "correctAnswer": 2
  },
  {
    "id": 3,
    "question": "¿Cuál es la salida de este código?",
    "code": "let a = 10;\nlet b = () => {\n  console.log(this.a);\n}\nb();",
    "answers": [
      "undefined",
      "null",
      "10",
      "ReferenceError"
    ],
    "correctAnswer": 0
  },
  {
    "id": 4,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "1 + 2 + '3' + 4 + 5",
    "answers": [
      "'3345'",
      "15",
      "NaN",
      "Error"
    ],
    "correctAnswer": 0
  },
  {
    "id": 5,
    "question": "¿Cuál es la salida de este código?",
    "code": "for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}",
    "answers": [
      "0 1 2",
      "3 3 3",
      "1 2 3",
      "2 1 0"
    ],
    "correctAnswer": 1
  },
  {
    "id": 6,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "2 > '3'",
    "answers": [
      "true",
      "false",
      "undefined",
      "NaN"
    ],
    "correctAnswer": 1
  },
  {
    "id": 7,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr = [1, 2, 3, 4, 5];\nconst [x, y, ...rest] = arr;\nconsole.log(rest.length);",
    "answers": [
      "0",
      "1",
      "2",
      "3"
    ],
    "correctAnswer": 3
  },
  {
    "id": 8,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'2' + 3 * 4",
    "answers": [
      "212",
      "20",
      "26",
      "Error"
    ],
    "correctAnswer": 0
  },
  {
    "id": 9,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr = [1, 2, 3];\narr[10] = 10;\nconsole.log(arr.length);",
    "answers": [
      "3",
      "10",
      "11",
      "undefined"
    ],
    "correctAnswer": 2
  },
  {
    "id": 10,
    "question": "¿Cuál es la diferencia entre null y undefined ?",
    "answers": [
      "El valor null representa intencionalmente un valor nulo o 'vacío' y undefined es el valor por default que se le asigna a una variable que esta sin definir aun",
      "El valor null se usa para objetos vacíos y undefined para cadenas vacías",
      "null se usa para números mientras que undefined se usa para objetos",
      "No hay diferencias"
    ],
    "correctAnswer": 0
  },
  {
    "id": 11,
    "question": "¿Cuál es la salida de este código?",
    "code": "console.log(0.1 + 0.2 === 0.3)",
    "answers": [
      "true",
      "false",
      "undefined",
      "NaN"
    ],
    "correctAnswer": 1
  },
  {
    "id": 12,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "[] + []",
    "answers": [
      "[]",
      "''",
      "undefined",
      "NaN"
    ],
    "correctAnswer": 1
  },
  {
    "id": 13,
    "question": "¿Cuál es la salida de este código?",
    "code": "const obj1 = {a: 'foo'};\nconst obj2 = {b: 'bar'};\nconst obj3 = {c: 'baz'};\nconst obj4 = Object.assign(obj1, obj2, obj3);\nconsole.log(obj4);",
    "answers": [
      "{a: 'foo', b: 'bar', c: 'baz'}",
      "{b: 'bar', c: 'baz'}",
      "{a: 'foo', b: 'bar'}",
      "{c: 'baz'}"
    ],
    "correctAnswer": 0
  },
  {
    "id": 14,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'foo' instanceof String",
    "answers": [
      "true",
      "false",
      "null",
      "undefined"
    ],
    "correctAnswer": 1
  },
  {
    "id": 15,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst arr3 = [...arr1, ...arr2];\nconsole.log(arr3);",
    "answers": [
      "[1, 2, 3, 4, 5, 6]",
      "[[1, 2, 3], [4, 5, 6]]",
      "[[1, 2, 3], 4, 5, 6]",
      "[1, 2, 3, [4, 5, 6]]"
    ],
    "correctAnswer": 0
  },
  {
    "id": 16,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "parseInt('0.1')",
    "answers": [
      "0.1",
      "1",
      "0",
      "Error"
    ],
    "correctAnswer": 2
  },
  {
    "id": 17,
    "question": "¿Cuál es la salida de este código?",
    "code": "const a = {x: 1};\nconst b = {y: 2};\nconst c = Object.assign({}, a, b);\nconsole.log(c);",
    "answers": [
      "{x: 1}",
      "{y: 2}",
      "{x: 1, y: 2}",
      "{}"
    ],
    "correctAnswer": 2
  },
  {
    "id": 18,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'foo' + new String('bar')",
    "answers": [
      "'foobar'",
      "'barfoo'",
      "TypeError",
      "NaN"
    ],
    "correctAnswer": 0
  },
  {
    "id": 19,
    "question": "¿Cuál es la salida de este código?",
    "code": "const obj = {a: 1};\nfunction foo(o) {\n o = {b: 2};\n}\nfoo(obj);\nconsole.log(obj);",
    "answers": [
      "{a: 1}",
      "{b: 2}",
      "{}",
      "undefined"
    ],
    "correctAnswer": 0
  },
  {
    "id": 20,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "typeof null",
    "answers": [
      "'object'",
      "'null'",
      "'undefined'",
      "TypeError"
    ],
    "correctAnswer": 0
  },
  {
    "id": 21,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\narr1.push(...arr2);\nconsole.log(arr1);",
    "answers": [
      "[1, 2, 3, 4, 5, 6]",
      "[[1, 2, 3], [4, 5, 6]]",
      "[[1, 2, 3], 4, 5, 6]",
      "[1, 2, 3, [4, 5, 6]]"
    ],
    "correctAnswer": 0
  },
  {
    "id": 22,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'foo' > 'bar'",
    "answers": [
      "true",
      "false",
      "undefined",
      "NaN"
    ],
    "correctAnswer": 0
  },
  {
    "id": 23,
    "question": "¿Cuál es la salida de este código?",
    "code": "const obj = {a: 1};\nfunction foo(o) {\n o.a = 2;\n}\nfoo(obj);\nconsole.log(obj);",
    "answers": [
      "{a: 1}",
      "{a: 2}",
      "{}",
      "undefined"
    ],
    "correctAnswer": 1
  },
  {
    "id": 24,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "2 + true",
    "answers": [
      "3",
      "2",
      "true",
      "Error"
    ],
    "correctAnswer": 0
  },
  {
    "id": 25,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst arr3 = [7, 8, 9];\nconst arr4 = [].concat(arr1, arr2, arr3);\nconsole.log(arr4);",
    "answers": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
      "[[1, 2, 3], 4, 5, 6, [7, 8, 9]]",
      "[1, 2, 3, [4, 5, 6], 7, 8, 9]"
    ],
    "correctAnswer": 0
  },
  {
    "id": 26,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'1' - - '1'",
    "answers": [
      "0",
      "2",
      "'11'",
      "NaN"
    ],
    "correctAnswer": 1
  },
  {
    "id": 27,
    "question": "¿Cuál es la salida de este código?",
    "code": "console.log(typeof [][Symbol.iterator]);",
    "answers": [
      "undefined",
      "'array'",
      "'object'",
      "'function'"
    ],
    "correctAnswer": 3
  },
  {
    "id": 28,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "[1, 2, 3].map(num => num * 2);",
    "answers": [
      "[2, 4, 6]",
      "[1, 2, 3, 1, 2, 3]",
      "[2, 2, 2]",
      "[1, 4, 9]"
    ],
    "correctAnswer": 0
  },
  {
    "id": 29,
    "question": "¿Cuál es la salida de este código?",
    "code": "let a = 10;\nlet b = () => {\n console.log(this.a);\n}\nlet c = {a: 5, b: b};\nc.b();",
    "answers": [
      "undefined",
      "null",
      "10",
      "5"
    ],
    "correctAnswer": 0
  },
  {
    "id": 30,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "true + false",
    "answers": [
      "1",
      "0",
      "'truefalse'",
      "Error"
    ],
    "correctAnswer": 0
  },
  {
    "id": 31,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr = [1, 2, 3, 4, 5];\nconst sum = arr.reduce((total, num) => total + num);\nconsole.log(sum);",
    "answers": [
      "15",
      "10",
      "5",
      "Error"
    ],
    "correctAnswer": 0
  },
  {
    "id": 32,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'foo' == new String('foo')",
    "answers": [
      "true",
      "false",
      "null",
      "undefined"
    ],
    "correctAnswer": 0
  },
  {
    "id": 33,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr = [1, 2, 3, 4, 5];\nconst filteredArr = arr.filter(num => num % 2 === 0);\nconsole.log(filteredArr);",
    "answers": [
      "[2, 4]",
      "[1, 3, 5]",
      "[1, 2, 3, 4, 5]",
      "[]"
    ],
    "correctAnswer": 0
  },
  {
    "id": 34,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "new String('foo') === 'foo'",
    "answers": [
      "true",
      "false",
      "null",
      "undefined"
    ],
    "correctAnswer": 1
  },
  {
    "id": 35,
    "question": "¿Cuál es la salida de este código?",
    "code": "const obj1 = {a: 'foo'};\nconst obj2 = {b: 'bar'};\nconst obj3 = {...obj1, ...obj2};\nconsole.log(obj3);",
    "answers": [
      "{a: 'foo', b: 'bar'}",
      "{b: 'bar'}",
      "{a: 'foo'}",
      "SyntaxError"
    ],
    "correctAnswer": 0
  },
  {
    "id": 36,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "[] == ![]",
    "answers": [
      "true",
      "false",
      "null",
      "undefined"
    ],
    "correctAnswer": 0
  },
  {
    "id": 37,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr = [1, 2, 3];\nconst [x, y, z] = arr;\nconsole.log(z);",
    "answers": [
      "1",
      "2",
      "3",
      "undefined"
    ],
    "correctAnswer": 2
  },
  {
    "id": 38,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'2' > 1",
    "answers": [
      "true",
      "false",
      "undefined",
      "NaN"
    ],
    "correctAnswer": 0
  },
  {
    "id": 39,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr1 = [1, 2, 3];\nconst arr2 = arr1.map(num => num * 2);\nconsole.log(arr2);",
    "answers": [
      "[1, 2, 3]",
      "[2, 4, 6]",
      "[2, 2, 2]",
      "[1, 4, 9]"
    ],
    "correctAnswer": 1
  },
  {
    "id": 40,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "undefined == null",
    "answers": [
      "true",
      "false",
      "null",
      "undefined"
    ],
    "correctAnswer": 0
  },
  {
    "id": 41,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr = [1, 2, 3];\nconst [x, ...rest] = arr;\nconsole.log(rest);",
    "answers": [
      "[1]",
      "[2, 3]",
      "[3]",
      "[]"
    ],
    "correctAnswer": 1
  },
  {
    "id": 42,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'foo' + 'bar' + 2",
    "answers": [
      "'foobar2'",
      "'foo2bar'",
      "'2foobar'",
      "Error"
    ],
    "correctAnswer": 0
  },
  {
    "id": 43,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr = [1, 2, 3];\nconst sum = arr.reduce((total, num) => total + num, 0);\nconsole.log(sum);",
    "answers": [
      "6",
      "5",
      "3",
      "0"
    ],
    "correctAnswer": 0
  },
  {
    "id": 44,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "2 * '3'",
    "answers": [
      "6",
      "5",
      "'6'",
      "Error"
    ],
    "correctAnswer": 0
  },
  {
    "id": 45,
    "question": "¿Cuál es la salida de este código?",
    "code": "const obj = {a: 'foo', b: 'bar'};\nfor (let key in obj) {\n console.log(key);\n}",
    "answers": [
      "'foo', 'bar'",
      "{'a', 'b'}",
      "SyntaxError",
      "undefined"
    ],
    "correctAnswer": 1
  },
  {
    "id": 46,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'2' + true",
    "answers": [
      "'2true'",
      "'3'",
      "3",
      "Error"
    ],
    "correctAnswer": 0
  },
  {
    "id": 47,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst arr3 = [...arr1, ...arr2];\nconsole.log(arr3);",
    "answers": [
      "[1, 2, 3, 4, 5, 6]",
      "[[1, 2, 3], [4, 5, 6]]",
      "[[1, 2, 3], 4, 5, 6]",
      "[1, 2, 3, [4, 5, 6]]"
    ],
    "correctAnswer": 0
  },
  {
    "id": 48,
    "question": "¿Cuál es el resultado de la siguiente expresión?",
    "code": "'foo' > 1",
    "answers": [
      "true",
      "false",
      "undefined",
      "NaN"
    ],
    "correctAnswer": 1
  },
  {
    "id": 49,
    "question": "¿Cuál es la salida de este código?",
    "code": "const arr = [1, 2, 3];\nconst [x, y] = arr;\nconsole.log(y);",
    "answers": [
      "1",
      "2",
      "3",
      "undefined"
    ],
    "correctAnswer": 1
  },
  {
    "id": 50,
    "question": "¿Cuál es el resultado de la siguiente expresión: [1, 2, 3].filter(num => num > 1);",
    "answers": [
      "[1, 2, 3]",
      "[2, 3]",
      "[1]",
      "[3]"
    ],
    "correctAnswer": 1
  },
  {
    "id": 51,
    "question": "¿Cómo puedes clonar un nodo en el DOM y sus elementos hijos?",
    "answers": [
      "Usando `element.copyNode()`",
      "Usando `element.duplicate()`",
      "Usando `element.replicate()`",
      "Usando `element.cloneNode(true)`"
    ],
    "correctAnswer": 3
  },
  {
    "id": 52,
    "question": "¿Qué evento se dispara cuando se envía un formulario en el DOM?",
    "answers": [
      "change",
      "submit",
      "load",
      "focus"
    ],
    "correctAnswer": 1
  },
  {
    "id": 53,
    "question": "¿Qué método se utiliza para comparar si dos nodos son iguales en el DOM?",
    "answers": [
      "isEqualNode",
      "isSameNode",
      "compareNodes",
      "equals"
    ],
    "correctAnswer": 0
  },
  {
    "id": 54,
    "question": "¿Cómo puedes añadir una clase a un elemento usando JavaScript y el DOM?",
    "answers": [
      "element.addClass('clase')",
      "element.addClassName('clase')",
      "element.classList.add('clase')",
      "element.classList.create('clase')"
    ],
    "correctAnswer": 2
  },
  {
    "id": 55,
    "question": "¿Cómo puedes reemplazar un nodo en el DOM por otro?",
    "answers": [
      "parent.replaceNode(oldNode, newNode)",
      "parent.replaceChild(newNode, oldNode)",
      "document.replaceChild(oldNode, newNode)",
      "document.replaceNode(oldNode, newNode)"
    ],
    "correctAnswer": 1
  },
  {
    "id": 56,
    "question": "¿Cómo puedes verificar si un elemento contiene otra clase usando el DOM?",
    "answers": [
      "element.classList.contains('clase')",
      "element.hasClass('clase')",
      "element.containsClass('clase')",
      "element.classExists('clase')"
    ],
    "correctAnswer": 0
  },
  {
    "id": 57,
    "question": "¿Qué evento se dispara cuando un elemento de entrada pierde el enfoque?",
    "answers": [
      "blur",
      "focusout",
      "leave",
      "exit"
    ],
    "correctAnswer": 0
  },
  {
    "id": 58,
    "question": "¿Cómo se puede escuchar eventos de teclado en todo el documento?",
    "answers": [
      "window.addEventListener('keypress', handler)",
      "window.onKeyPress(handler)",
      "window.addEventListener('keydown', handler)",
      "document.onKeyDown(handler)"
    ],
    "correctAnswer": 2
  },
  {
    "id": 59,
    "question": "¿Cómo puedes desplazar la página hacia la parte superior?",
    "answers": [
      "document.scrollToTop()",
      "window.pageScrollTop()",
      "window.scrollTo(0, 0)",
      "document.pageScrollTop()"
    ],
    "correctAnswer": 2
  },
  {
    "id": 60,
    "question": "¿Qué evento se dispara cuando la página ha terminado de cargarse?",
    "answers": [
      "DOMContentLoaded",
      "load",
      "ready",
      "complete"
    ],
    "correctAnswer": 1
  },
  {
    "id": 61,
    "question": "¿Cómo puedes obtener el primer elemento que coincide con un selector CSS?",
    "answers": [
      "document.querySelector(selector)",
      "document.query(selector)",
      "document.getElementBySelector(selector)",
      "document.queryAll(selector)[0]"
    ],
    "correctAnswer": 0
  },
  {
    "id": 62,
    "question": "¿Cómo puedes recorrer todos los nodos hijos de un elemento en el DOM?",
    "answers": [
      "element.children.forEach()",
      "element.nodes.forEach()",
      "element.childNodes.forEach()",
      "element.childList.forEach()"
    ],
    "correctAnswer": 2
  },
  {
    "id": 63,
    "question": "¿Cómo puedes añadir múltiples clases a un elemento en el DOM?",
    "answers": [
      "element.addClasses('clase1', 'clase2')",
      "element.classList.add('clase1', 'clase2')",
      "element.classList.addClasses(['clase1', 'clase2'])",
      "element.classList.create('clase1', 'clase2')"
    ],
    "correctAnswer": 1
  },
  {
    "id": 64,
    "question": "¿Cómo puedes alternar (toggle) una clase de un elemento en el DOM?",
    "answers": [
      "element.toggleClass('clase')",
      "element.classList.toggle('clase')",
      "element.classToggle('clase')",
      "element.toggle('clase')"
    ],
    "correctAnswer": 1
  },
  {
    "id": 65,
    "question": "¿Cómo puedes crear un nuevo elemento HTML en el DOM?",
    "answers": [
      "document.createHtml('div')",
      "document.newElement('div')",
      "document.buildElement('div')",
      "document.createElement('div')"
    ],
    "correctAnswer": 3
  },
  {
    "id": 66,
    "question": "¿Cómo puedes eliminar un atributo de un elemento en el DOM?",
    "answers": [
      "element.deleteAttribute('attr')",
      "element.removeAttribute('attr')",
      "element.clearAttribute('attr')",
      "element.eraseAttribute('attr')"
    ],
    "correctAnswer": 1
  },
  {
    "id": 67,
    "question": "¿Qué propiedad se usa para acceder al contenido de texto de un elemento en el DOM?",
    "answers": [
      "innerText",
      "innerHTML",
      "textContent",
      "outerHTML"
    ],
    "correctAnswer": 2
  },
  {
    "id": 68,
    "question": "¿Qué propiedad de un elemento del DOM te permite obtener su contenido HTML?",
    "answers": [
      "innerHTML",
      "textContent",
      "outerHTML",
      "innerText"
    ],
    "correctAnswer": 0
  },
  {
    "id": 69,
    "question": "¿Cómo puedes detener la propagación de un evento en el DOM?",
    "answers": [
      "event.preventPropagation()",
      "event.stopBubble()",
      "event.stopPropagation()",
      "event.preventBubble()"
    ],
    "correctAnswer": 2
  },
  {
    "id": 70,
    "question": "¿Cómo puedes prevenir la acción predeterminada de un evento en el DOM?",
    "answers": [
      "event.stopDefault()",
      "event.preventDefault()",
      "event.defaultAction(false)",
      "event.stopAction()"
    ],
    "correctAnswer": 1
  },
  {
    "id": 71,
    "question": "¿Cómo se detecta si un elemento está visible en la pantalla?",
    "answers": [
      "element.getBoundingClientRect().top < window.innerHeight",
      "element.isVisible()",
      "document.isElementVisible(element)",
      "window.isElementInViewport(element)"
    ],
    "correctAnswer": 0
  },
  {
    "id": 72,
    "question": "¿Cuál es la forma correcta de establecer el atributo 'src' de una imagen en el DOM?",
    "answers": [
      "image.setAttribute('src', 'url')",
      "image.source = 'url'",
      "image.src = 'url'",
      "image.setSource('url')"
    ],
    "correctAnswer": 2
  },
  {
    "id": 73,
    "question": "¿Cómo puedes asignar varios atributos a un elemento del DOM?",
    "answers": [
      "element.setAttributeMultiple({ 'src': 'image.jpg', 'alt': 'description' })",
      "Object.assign(element.attributes, { 'src': 'image.jpg', 'alt': 'description' })",
      "element.assignAttributes({ 'src': 'image.jpg', 'alt': 'description' })",
      "element.addAttributes({ 'src': 'image.jpg', 'alt': 'description' })"
    ],
    "correctAnswer": 1
  },
  {
    "id": 74,
    "question": "¿Cómo puedes agregar un evento que solo se dispare una vez en el DOM?",
    "answers": [
      "element.onClickOnce(handler)",
      "element.addEventListenerOnce('click', handler)",
      "element.addEventListener('click', handler, { once: true })",
      "element.oneClickEvent(handler)"
    ],
    "correctAnswer": 2
  },
  {
    "id": 75,
    "question": "¿Cuál es la diferencia entre previousSibling y previousElementSibling en el DOM?",
    "answers": [
      "previousSibling incluye nodos de texto, previousElementSibling solo elementos",
      "Ambos acceden al nodo anterior, pero uno es asincrónico",
      "previousSibling selecciona solo elementos visibles, previousElementSibling selecciona cualquier elemento",
      "No hay diferencia entre ellos"
    ],
    "correctAnswer": 0
  },
  {
    "id": 76,
    "question": "¿Cómo puedes agregar un nodo como el primer hijo de un elemento en el DOM?",
    "answers": [
      "parent.addFirstChild(newNode)",
      "parent.appendFirst(newNode)",
      "parent.insertChildAtStart(newNode)",
      "parent.prepend(newNode)"
    ],
    "correctAnswer": 3
  },
  {
    "id": 77,
    "question": "¿Cómo puedes acceder al elemento que disparó un evento en el DOM?",
    "answers": [
      "event.currentElement",
      "event.target",
      "event.element",
      "event.source"
    ],
    "correctAnswer": 1
  },
  {
    "id": 78,
    "question": "¿Cómo puedes mover un elemento a otra parte del DOM?",
    "answers": [
      "element.moveTo(newParent)",
      "element.moveToParent(newParent)",
      "element.move(newParent)",
      "newParent.appendChild(element)"
    ],
    "correctAnswer": 3
  },
  {
    "id": 79,
    "question": "¿Cómo puedes capturar todos los elementos de un formulario?",
    "answers": [
      "form.elements",
      "form.getAllInputs()",
      "form.getElements()",
      "form.querySelectorAll('input, select, textarea')"
    ],
    "correctAnswer": 0
  },
  {
    "id": 80,
    "question": "¿Cuál es la diferencia entre firstElementChild y firstChild en el DOM?",
    "answers": [
      "firstChild excluye nodos de texto, firstElementChild los incluye",
      "Ambos seleccionan el primer hijo elemento",
      "firstElementChild excluye nodos de texto, firstChild los incluye",
      "No hay diferencia entre ellos"
    ],
    "correctAnswer": 2
  },
  {
    "id": 81,
    "question": "¿Cómo puedes añadir un evento de clic a varios elementos de la misma clase?",
    "answers": [
      "document.querySelectorAll('.class').addEventListener('click', handler)",
      "document.addClickEventToAll('.class', handler)",
      "document.attachClickToAll('.class', handler)",
      "document.querySelectorAll('.class').forEach(el => el.addEventListener('click', handler))"
    ],
    "correctAnswer": 3
  },
  {
    "id": 82,
    "question": "¿Qué evento se dispara cuando un usuario modifica texto en un campo de entrada?",
    "answers": [
      "select",
      "focus",
      "input",
      "change"
    ],
    "correctAnswer": 2
  },
  {
    "id": 83,
    "question": "¿Cómo puedes acceder a la posición de desplazamiento vertical de la ventana?",
    "answers": [
      "document.scrollY",
      "window.scrollY",
      "document.pageYOffset",
      "window.pageScrollY"
    ],
    "correctAnswer": 1
  },
  {
    "id": 84,
    "question": "¿Cómo puedes acceder al último hijo de un elemento en el DOM?",
    "answers": [
      "element.getLastChild()",
      "element.lastChildElement",
      "element.lastElementChild",
      "element.childNodes[element.childNodes.length - 1]"
    ],
    "correctAnswer": 2
  },
  {
    "id": 85,
    "question": "¿Cómo puedes obtener todos los elementos con una clase específica en el DOM?",
    "answers": [
      "document.getClassElements('class')",
      "document.getElementsByClass('class')",
      "document.getElementsByClassName('class')",
      "document.selectClassElements('class')"
    ],
    "correctAnswer": 2
  },
  {
    "id": 86,
    "question": "¿Cómo puedes saber la cantidad de hijos de un elemento en el DOM?",
    "answers": [
      "element.children.length",
      "element.childCount",
      "element.childNodes.length",
      "element.childQuantity()"
    ],
    "correctAnswer": 0
  },
  {
    "id": 87,
    "question": "¿Cómo puedes evitar que un formulario recargue la página al enviarlo?",
    "answers": [
      "event.preventDefault()",
      "event.stopPropagation()",
      "event.cancel()",
      "event.preventReload()"
    ],
    "correctAnswer": 0
  },
  {
    "id": 88,
    "question": "¿Cuál es la forma correcta de acceder a la URL de la página actual?",
    "answers": [
      "document.URL",
      "window.href",
      "window.location.href",
      "document.location.URL"
    ],
    "correctAnswer": 2
  },
  {
    "id": 89,
    "question": "¿Cómo puedes acceder al valor de un campo de entrada en el DOM?",
    "answers": [
      "input.getAttribute('value')",
      "input.value",
      "input.textContent",
      "input.innerText"
    ],
    "correctAnswer": 1
  },
  {
    "id": 90,
    "question": "¿Cómo puedes acceder a la posición de desplazamiento horizontal de la ventana?",
    "answers": [
      "window.pageXOffset",
      "document.scrollX",
      "window.pageScrollX",
      "window.scrollX"
    ],
    "correctAnswer": 3
  },
  {
    "id": 91,
    "question": "¿Cómo puedes obtener el elemento padre de un nodo en el DOM?",
    "answers": [
      "element.parentElement",
      "element.parentNode",
      "element.getParent()",
      "element.parent()"
    ],
    "correctAnswer": 1
  },
  {
    "id": 92,
    "question": "¿Qué evento se dispara cuando se cambia el tamaño de la ventana?",
    "answers": [
      "resize",
      "change",
      "windowResize",
      "screenChange"
    ],
    "correctAnswer": 0
  },
  {
    "id": 93,
    "question": "¿Cómo puedes seleccionar todos los elementos con la misma etiqueta en el DOM?",
    "answers": [
      "document.getElementsByTagName('tag')",
      "document.querySelectorAll('tag')",
      "document.getElementsByClassName('tag')",
      "document.getAllTags('tag')"
    ],
    "correctAnswer": 0
  },
  {
    "id": 94,
    "question": "¿Qué evento se dispara cuando el usuario suelta una tecla en el teclado?",
    "answers": [
      "keydown",
      "keyup",
      "keypress",
      "keyrelease"
    ],
    "correctAnswer": 1
  },
  {
    "id": 95,
    "question": "¿Cómo se puede cambiar el contenido de texto de un elemento en el DOM?",
    "answers": [
      "element.innerText = 'Nuevo texto'",
      "element.textContent = 'Nuevo texto'",
      "element.setText('Nuevo texto')",
      "element.text = 'Nuevo texto'"
    ],
    "correctAnswer": 1
  },
  {
    "id": 96,
    "question": "¿Qué evento se dispara cuando se cambia el valor de un campo de entrada?",
    "answers": [
      "input",
      "keyup",
      "change",
      "keydown"
    ],
    "correctAnswer": 2
  },
  {
    "id": 97,
    "question": "¿Cómo puedes modificar el estilo CSS de un elemento en el DOM?",
    "answers": [
      "element.setStyle('color', 'red')",
      "element.style.color = 'red'",
      "element.setCSS('color', 'red')",
      "element.addStyle('color', 'red')"
    ],
    "correctAnswer": 1
  },
  {
    "id": 98,
    "question": "¿Cómo puedes hacer que un campo de entrada esté deshabilitado usando el DOM?",
    "answers": [
      "input.disabled = true",
      "input.setDisabled(true)",
      "input.addAttribute('disabled')",
      "input.disable = true"
    ],
    "correctAnswer": 0
  },
  {
    "id": 99,
    "question": "¿Cómo puedes obtener todos los elementos con un atributo específico en el DOM?",
    "answers": [
      "document.getElementsByAttribute('attr')",
      "document.querySelectorAll('[attr]')",
      "document.getElementsByTagName('attr')",
      "document.querySelectorAll('attr')"
    ],
    "correctAnswer": 1
  },
  {
    "id": 100,
    "question": "¿Cuál es la forma correcta de detectar cuando se hace clic fuera de un elemento?",
    "answers": [
      "Usando el evento 'mouseleave' en el elemento",
      "Usando el evento 'blur' en el elemento",
      "Usando el evento 'outsideclick' en el elemento",
      "Usando el evento 'click' en document y verificando el target"
    ],
    "correctAnswer": 3
  }
]